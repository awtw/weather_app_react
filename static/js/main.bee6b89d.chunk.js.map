{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","components/Joke.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","Joke","Joketitle","JokeAns","API_KEY","App","state","undefined","jokeTitle","jokePunchile","getJoke","_callee","e","api_call","data","jokeRes","regenerator_default","wrap","_context","prev","next","fetch","sent","json","setup","punchline","console","log","_this","setState","stop","_callee2","_context2","preventDefault","target","elements","value","concat","main","temp","sys","weather","joke","this","components_Titles","components_Form","components_Weather","components_Joke","GetJoke","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bee6b89d.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Titles = () => (\n<div>\n    <h1 className=\"title-container__title\">Weather Finder</h1>\n    <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n</div>\n)\nexport default Titles","import React from \"react\"\n\n\nconst Form = props => (\n    <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\n        <button>Get Weather</button>\n    </form>\n)\n\n\nexport default Form","import React from \"react\"\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {\n            props.city && props.country && <p className=\"weather__key\"> Location:\n\t \t\t<span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p>\n        }\n        {\n            props.temperature && <p className=\"weather__key\"> Temperature:\n\t \t\t<span className=\"weather__value\"> {props.temperature}\t</span>\n            </p>\n        }\n        {\n            props.humidity && <p className=\"weather__key\"> Humidity:\n\t \t\t<span className=\"weather__value\"> {props.humidity} </span>\n            </p>\n        }\n        {\n            props.description && <p className=\"weather__key\"> Conditions:\n\t \t\t<span className=\"weather__value\"> {props.description} </span>\n            </p>\n        }\n        {\n            props.error && <p className=\"weather__error\">{props.error}</p>\n        }\n    </div>\n)\n\n\nexport default Weather","import React from 'react'\n\nconst Joke = props => (\n\n    <div className=\"joke\">\n        <h5>Cheer ! Have a Joke !</h5>\n        <h3 className=\"jokeTitle\">{props.Joketitle}</h3>\n        <h3 className=\"jokeAns\">{props.JokeAns}</h3>\n    </div>\n)\n\n\n\nexport default Joke","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport Joke from './components/Joke';\n\nconst API_KEY = 'b22619fd187e3343c3f120051e88c3c8';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    jokeTitle: undefined,\n    jokePunchile: undefined\n  };\n  componentDidMount() {\n    this.getJoke();\n  }\n  getJoke = async e => {\n    // e.preventDefault()\n    let api_call = await fetch(\n      'https://official-joke-api.appspot.com/random_joke'\n    );\n    let data = await api_call.json();\n    let jokeTitle = await data.setup;\n    let jokeRes = await data.punchline;\n    console.log(jokeTitle, jokeRes);\n    this.setState({\n      jokeTitle: jokeTitle,\n      jokePunchile: jokeRes\n    });\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the value',\n        joke: undefined\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"title\">\n              <Titles getJoke={this.getJoke} />\n            </div>\n            <div className=\"content\">\n              <div className=\"left\">\n                <Form getWeather={this.getWeather} />\n                <div className=\"weather\">\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n              <div className=\"right\">\n                <Joke\n                  className=\"joke\"\n                  GetJoke={this.getJoke}\n                  Joketitle={this.state.jokeTitle}\n                  JokeAns={this.state.jokePunchile}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}